// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieApp.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MovieApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220503145629_ChangeRestrictionLinkColumnTypeToInt")]
    partial class ChangeRestrictionLinkColumnTypeToInt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CategoryMovie");

                    b.HasData(
                        new
                        {
                            CategoriesId = 1,
                            MoviesId = 2
                        },
                        new
                        {
                            CategoriesId = 2,
                            MoviesId = 2
                        });
                });

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.Property<int>("CountriesId")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesId")
                        .HasColumnType("integer");

                    b.HasKey("CountriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CountryMovie");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Link = "action",
                            Name = "action"
                        },
                        new
                        {
                            Id = 2,
                            Link = "cartoons",
                            Name = "cartoons"
                        },
                        new
                        {
                            Id = 3,
                            Link = "romantic",
                            Name = "romantic"
                        },
                        new
                        {
                            Id = 4,
                            Link = "comedy",
                            Name = "comedy"
                        },
                        new
                        {
                            Id = 5,
                            Link = "scientific",
                            Name = "scientific"
                        },
                        new
                        {
                            Id = 6,
                            Link = "horror",
                            Name = "horror"
                        },
                        new
                        {
                            Id = 7,
                            Link = "thriller",
                            Name = "thriller"
                        },
                        new
                        {
                            Id = 8,
                            Link = "drama",
                            Name = "drama"
                        },
                        new
                        {
                            Id = 9,
                            Link = "adventure",
                            Name = "adventure"
                        },
                        new
                        {
                            Id = 10,
                            Link = "fantastic",
                            Name = "fantastic"
                        },
                        new
                        {
                            Id = 11,
                            Link = "fantasy",
                            Name = "fantasy"
                        },
                        new
                        {
                            Id = 12,
                            Link = "western",
                            Name = "western"
                        });
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("ParrentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Published_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Link = "usa",
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2,
                            Link = "france",
                            Name = "France"
                        });
                });

            modelBuilder.Entity("MovieApp.Core.Entities.HomePagePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HomePagePositions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "season"
                        },
                        new
                        {
                            Id = 2,
                            Name = "new"
                        },
                        new
                        {
                            Id = 3,
                            Name = "expected"
                        });
                });

            modelBuilder.Entity("MovieApp.Core.Entities.HomePageSettings", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "PositionId");

                    b.ToTable("HomePageSettings");

                    b.HasData(
                        new
                        {
                            MovieId = 2,
                            PositionId = 1
                        },
                        new
                        {
                            MovieId = 3,
                            PositionId = 1
                        },
                        new
                        {
                            MovieId = 4,
                            PositionId = 1
                        },
                        new
                        {
                            MovieId = 5,
                            PositionId = 1
                        });
                });

            modelBuilder.Entity("MovieApp.Core.Entities.MovieAggregate.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Release")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RestrictionId")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RestrictionId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Пол Эджкомб — начальник блока смертников в тюрьме «Холодная гора», каждый из узников которого однажды проходит «зеленую милю» по пути к месту казни. Пол повидал много заключённых и надзирателей за время работы. Однако гигант Джон Коффи, обвинённый в страшном преступлении, стал одним из самых необычных обитателей блока.",
                            Dislikes = 1,
                            Duration = 189,
                            Likes = 23,
                            Release = new DateTime(1999, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestrictionId = 2,
                            Slug = "green-mile",
                            Title = "Green Mile"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Повелитель сил тьмы Саурон направляет свою бесчисленную армию под стены Минас-Тирита, крепости Последней Надежды. Он предвкушает близкую победу, но именно это мешает ему заметить две крохотные фигурки — хоббитов, приближающихся к Роковой Горе, где им предстоит уничтожить Кольцо Всевластья.",
                            Dislikes = 16,
                            Duration = 201,
                            Likes = 111,
                            Release = new DateTime(2003, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestrictionId = 3,
                            Slug = "the-lord-of-the-rings-the-return-of-the-king",
                            Title = "The Lord of the Rings: The Return of the King"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Фильм рассказывает реальную историю загадочного Оскара Шиндлера, члена нацистской партии, преуспевающего фабриканта, спасшего во время Второй мировой войны почти 1200 евреев.",
                            Dislikes = 50,
                            Duration = 195,
                            Likes = 78,
                            Release = new DateTime(1993, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestrictionId = 5,
                            Slug = "schindlers-list",
                            Title = "Schindler's List"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Сидя на автобусной остановке, Форрест Гамп — не очень умный, но добрый и открытый парень — рассказывает случайным встречным историю своей необыкновенной жизни. С самого малолетства он страдал от заболевания ног, и соседские хулиганы дразнили мальчика, и в один прекрасный день Форрест открыл в себе невероятные способности к бегу.Подруга детства Дженни всегда его поддерживала и защищала, но вскоре дороги их разошлись",
                            Dislikes = 46,
                            Duration = 142,
                            Likes = 89,
                            Release = new DateTime(1994, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestrictionId = 1,
                            Slug = "forrest-gump",
                            Title = "Forrest Gump"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Когда засуха, пыльные бури и вымирание растений приводят человечество к продовольственному кризису, коллектив исследователей и учёных отправляется сквозь червоточину (которая предположительно соединяет области пространства-времени через большое расстояние) в путешествие, чтобы превзойти прежние ограничения для космических путешествий человека и найти планету с подходящими для человечества условиями.",
                            Dislikes = 7,
                            Duration = 169,
                            Likes = 77,
                            Release = new DateTime(2014, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestrictionId = 4,
                            Slug = "interstellar",
                            Title = "Interstellar"
                        });
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("IsPoster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("IsPoster")
                        .HasDefaultValueSql("false");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Quality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Qualities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "FullHD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SD"
                        });
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Link")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Restrictions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Link = 2,
                            Name = "21+"
                        },
                        new
                        {
                            Id = 2,
                            Link = 18,
                            Name = "18+"
                        },
                        new
                        {
                            Id = 3,
                            Link = 16,
                            Name = "16+"
                        },
                        new
                        {
                            Id = 4,
                            Link = 14,
                            Name = "14+"
                        },
                        new
                        {
                            Id = 5,
                            Link = 12,
                            Name = "12+"
                        },
                        new
                        {
                            Id = 6,
                            Link = 6,
                            Name = "6+"
                        });
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Published_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("MovieApp.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "",
                            Email = "admin@mail.ru",
                            Login = "admin",
                            Password = "12345678",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MovieQuality", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("integer");

                    b.Property<int>("QualitiesId")
                        .HasColumnType("integer");

                    b.HasKey("MoviesId", "QualitiesId");

                    b.HasIndex("QualitiesId");

                    b.ToTable("MovieQuality");
                });

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.HasOne("MovieApp.Core.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Core.Entities.MovieAggregate.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.HasOne("MovieApp.Core.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Core.Entities.MovieAggregate.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Comment", b =>
                {
                    b.HasOne("MovieApp.Core.Entities.MovieAggregate.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.HomePageSettings", b =>
                {
                    b.HasOne("MovieApp.Core.Entities.MovieAggregate.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.MovieAggregate.Movie", b =>
                {
                    b.HasOne("MovieApp.Core.Entities.Restriction", "Restriction")
                        .WithMany("Movies")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Photo", b =>
                {
                    b.HasOne("MovieApp.Core.Entities.MovieAggregate.Movie", "Movie")
                        .WithMany("Photos")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Review", b =>
                {
                    b.HasOne("MovieApp.Core.Entities.MovieAggregate.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.User", b =>
                {
                    b.HasOne("MovieApp.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MovieQuality", b =>
                {
                    b.HasOne("MovieApp.Core.Entities.MovieAggregate.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApp.Core.Entities.Quality", null)
                        .WithMany()
                        .HasForeignKey("QualitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieApp.Core.Entities.MovieAggregate.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Restriction", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieApp.Core.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
